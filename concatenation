
Write a Program to Create, Concatenate and Print a string and accessing sub-string from given string.



Aim : Program to create, concatenate and print a string and accessing sub-string from given string.


Program :

# Python program to show # string concatenation
# Defining strings s1=input("Enter first String : ");
s2=input("Enter second String : "); print("First string is : ",s1); print("Second string is : ",s2);
#+ Operator is used to strings concatenation print("concatenations of two strings :",s1+s2); print("Substring of given string :",s1[1:4]);

Output:

Enter first String : Artificial Enter second String : Intelligence First string is : Artificial
Second string is : Intelligence
 
concatenations of two strings : ArtificialIntelligence Substring of given string : rti

Result:

The Program has been executed and the output was verified.
 



Write a program to Create, Append and Remove lists in Python



Aim : Program to create, append and remove lists in python.



Program:

pets = ['cat', 'dog', 'rat', 'pig', 'tiger']
snakes=['python','anaconda','fish','cobra','mamba'] print("Pets are :",pets)
print("Snakes are :",snakes) animals=pets+snakes print("Animals are :",animals) snakes.remove("fish") print("updated Snakes are :",snakes)


Output

Pets are : ['cat', 'dog', 'rat', 'pig', 'tiger']
Snakes are : ['python', 'anaconda', 'fish', 'cobra', 'mamba']
Animals are : ['cat', 'dog', 'rat', 'pig', 'tiger', 'python', 'anaconda', 'fish', 'cobra', 'mamba'] updated Snakes are : ['python', 'anaconda', 'cobra', 'mamba']
 

Write a Python program to define a module to find Fibonacci numbers and import the module to another program



Aim : Program to define a module to find Fibonacci numbers and import the module to another program
Program:


# Fibonacci numbers module
def fib(n):	# write Fibonacci series up to n a, b = 0, 1
while b < n: print(b, end =" ") a, b = b, a+b


'''Write a python program to define a module to find Fibonacci Numbers and import the module to another program'''
#import fibonacci module import fibonacci
num=int(input("Enter any number to print Fibonacci series ")) fibonacci.fib(num)

Output

E:\Python>python week14.py
Enter any number to print Fibonacci series 50 1 1 2 3 5 8 13 21 34
1 1 2 3 5 8 13 21 34
E:\Python>python week14.py
Enter any number to print Fibonacci series 1001 1 2 3 5 8 13 21 34 55 89
1 1 2 3 5 8 13 21 34 55 89
 


Write a Python Program to Find the factorial of a number using recursion



Aim: Program to Find the factorial of a number using recursion.



Program:


def recur_fact(n):
"""Function to return the factorial of a number using recursion"""
if n == 1: return n
else:
return n*recur_fact(n-1)
num = int(input("Enter a number: ")) # check is the number is negative
if num < 0:
print("Sorry, factorial does not exist for negative numbers") elif num == 0:
print("The factorial of 0 is 1") else:
print("The factorial of",num,"is",recur_fact(num))


Output


Enter a number: 8
The factorial of 8 is 40320


Result:

The Program has been executed and the output was verified.
 
Write a program to Create, Append and Remove lists in Python



Aim : Program to create, append and remove lists in python.



Program:

pets = ['cat', 'dog', 'rat', 'pig', 'tiger']
snakes=['python','anaconda','fish','cobra','mamba'] print("Pets are :",pets)
print("Snakes are :",snakes) animals=pets+snakes print("Animals are :",animals) snakes.remove("fish") print("updated Snakes are :",snakes)


Output

Pets are : ['cat', 'dog', 'rat', 'pig', 'tiger']
Snakes are : ['python', 'anaconda', 'fish', 'cobra', 'mamba']
Animals are : ['cat', 'dog', 'rat', 'pig', 'tiger', 'python', 'anaconda', 'fish', 'cobra', 'mamba'] updated Snakes are : ['python', 'anaconda', 'cobra', 'mamba']





Result:

The Program has been executed and the output was verified.
 



Write a Python class to Reverse a string word by word.



Aim: To write a Python class to Reverse a string word by word



Program:

class py_reverse:

def revr(self, strs): sp=strs.split() sp.reverse() res=" ".join(sp) return res

str1=input("Enter a string with 2 or more words : ")

print("Reverse of string word by word: \n",py_reverse().revr(str1));


Output

Enter a string with 2 or more words : SRM BCA Students Reverse of string word by word:
Students BCA SRM


Result:

The Program has been executed and the output was verified.
 


Write a Program showing the various possibilities involved in solving a water jug problem




Aim: - Program showing the various possibilities involved in solving a water jug problem.


Program:


# This function is used to initialize the

# dictionary elements with a default value. from collections import defaultdict

# jug1 and jug2 contain the value

# for max capacity in respective jugs

# and aim is the amount of water to be measured. jug1, jug2, aim = 4, 3, 2

# Initialize dictionary with # default value as false.
visited = defaultdict(lambda: False)


# Recursive function which prints the # intermediate steps to reach the final # solution and return boolean value
 
# (True if solution is possible, otherwise False). # amt1 and amt2 are the amount of water present # in both jugs at a certain point of time.
def waterJugSolver(amt1, amt2):


# Checks for our goal and # returns true if achieved.
if (amt1 == aim and amt2 == 0) or (amt2 == aim and amt1 == 0): print(amt1, amt2)
return True


# Checks if we have already visited the

# combination or not. If not, then it proceeds further. if visited[(amt1, amt2)] == False:
print(amt1, amt2)


# Changes the boolean value of # the combination as it is visited. visited[(amt1, amt2)] = True

# Check for all the 6 possibilities and

# see if a solution is found in any one of them. return (waterJugSolver(0, amt2) or
waterJugSolver(amt1, 0) or waterJugSolver(jug1, amt2) or
 
waterJugSolver(amt1, jug2) or waterJugSolver(amt1 + min(amt2, (jug1-amt1)), amt2 - min(amt2, (jug1-amt1))) or waterJugSolver(amt1 - min(amt1, (jug2-amt2)), amt2 + min(amt1, (jug2-amt2))))
# Return False if the combination is

# already visited to avoid repetition otherwise # recursion will enter an infinite loop.
else:

return False print("Steps: ")
# Call the function and pass the

# initial amount of water present in both jugs. waterJugSolver(0, 0)


Output

Steps:
0 0
4 0
4 3
0 3
3 0
3 3
4 2
0 2
True


Result:
The Program has been executed and the output was verified.
 

Write a Program for solving a Water Jug Problem using Breadth first search (BFS)

Aim: - Program for solving a water jug problem using Breadth First Search (BFS).

Program:

from collections import deque def BFS(a, b, target):

# Map is used to store the states, every # state is hashed to binary value to
# indicate either that state is visited # before or not
m = {}
isSolvable = False path = []

# Queue to maintain states q = deque()

# Initialing with initial state q.append((0, 0))

while (len(q) > 0):

# Current state u = q.popleft()

#q.pop() #pop off used state

# If this state is already visited if ((u[0], u[1]) in m):
continue

# Doesn't met jug constraints if ((u[0] > a or u[1] > b or
 
u[0] < 0 or u[1] < 0)):
continue

# Filling the vector for constructing # the solution path path.append([u[0], u[1]])

# Marking current state as visited m[(u[0], u[1])] = 1

# If we reach solution state, put ans=1 if (u[0] == target or u[1] == target):
isSolvable = True

if (u[0] == target):
if (u[1] != 0):

 


else:
 
# Fill final state path.append([u[0], 0])

if (u[0] != 0):

# Fill final state path.append([0, u[1]])
 

# Print the solution path sz = len(path)
for i in range(sz):
print("(", path[i][0], ",",
path[i][1], ")")
break

# If we have not reached final state # then, start developing intermediate # states to reach solution state q.append([u[0], b]) # Fill Jug2 q.append([a, u[1]]) # Fill Jug1

for ap in range(max(a, b) + 1):
 
# Pour amount ap from Jug2 to Jug1 c = u[0] + ap
d = u[1] - ap

# Check if this state is possible or not if (c == a or (d == 0 and d >= 0)):
q.append([c, d])

# Pour amount ap from Jug 1 to Jug2 c = u[0] - ap
d = u[1] + ap

# Check if this state is possible or not if ((c == 0 and c >= 0) or d == b):
q.append([c, d])

# Empty Jug2 q.append([a, 0])

# Empty Jug1 q.append([0, b])

# No, solution exists if ans=0 if (not isSolvable):
print ("No solution")

# Driver code
if    name	== ' main   ':

Jug1, Jug2, target = 4, 3, 2 print("Path from initial state "
"to solution state ::") BFS(Jug1, Jug2, target)


Output:

Path from initial state to solution state ::
 
( 0 , 0 )
( 0 , 3 )
( 4 , 0 )
( 4 , 3 )
( 3 , 0 )
( 1 , 3 )
( 3 , 3 )
( 4 , 2 )
( 0 , 2 )

Result:
The Program has been executed and the output was verified.
 

Write a Program for solving a Water Jug Problem using Depth first search (DFS)



Aim : - Program for solving a Water Jug Problem using Depth first search (DFS)

Program:

capacity = (12,8,5)
# Maximum capacities of 3 jugs -> x,y,z x = capacity[0]
y = capacity[1] z = capacity[2]

# to mark visited states memory = {}

# store solution path ans = []

def get_all_states(state):
# Let the 3 jugs be called a,b,c a = state[0]
b = state[1] c = state[2]

if(a==6 and b==6): ans.append(state) return True

# if current state is already visited earlier if((a,b,c) in memory):
return False

memory[(a,b,c)] = 1 memory

#empty jug a if(a>0):
#empty a into b if(a+b<=y):
memory
if( get_all_states((0,a+b,c)) ):
 


else:
 
ans.append(state) return True
 
if( get_all_states((a-(y-b), y, c)) ): ans.append(state)
return True #empty a into c if(a+c<=z):
if( get_all_states((0,b,a+c)) ): ans.append(state)
return True
else:
if( get_all_states((a-(z-c), b, z)) ): ans.append(state)
return True

#empty jug b if(b>0):
#empty b into a if(a+b<=x):
if( get_all_states((a+b, 0, c)) ): ans.append(state)
return True
else:
if( get_all_states((x, b-(x-a), c)) ): ans.append(state)
return True #empty b into c if(b+c<=z):
if( get_all_states((a, 0, b+c)) ): ans.append(state)
return True
else:
if( get_all_states((a, b-(z-c), z)) ): ans.append(state)
return True

#empty jug c if(c>0):
#empty c into a if(a+c<=x):
if( get_all_states((a+c, b, 0)) ): ans.append(state)
return True
else:
if( get_all_states((x, b, c-(x-a))) ):
 
ans.append(state) return True
#empty c into b if(b+c<=y):
if( get_all_states((a, b+c, 0)) ): ans.append(state)
return True
else:
if( get_all_states((a, y, c-(y-b))) ): ans.append(state)
return True return False
initial_state = (12,0,0) print("Starting work...\n") get_all_states(initial_state) ans.reverse()
for i in ans: print(i)

Output

Starting work...

(12, 0, 0)
(4, 8, 0)
(0, 8, 4)
(8, 0, 4)
(8, 4, 0)
(3, 4, 5)
(3, 8, 1)
(11, 0, 1)
(11, 1, 0)
(6, 1, 5)
(6, 6, 0)


Result:

The Program has been executed and the output was verified.
 

Write a Program to find out route distance between two cities



Aim : Program to find out route distance between two Cities



Program:

x1 = float(input('Enter x1: ')) y1 = float(input('Enter y1: ')) x2 = float(input('Enter x2: ')) y2 = float(input('Enter y2: '))

# Calculating distance
d = ( ((x2-x1)*2) + ((y2-y1)*2 ) * 0.5)

# Displaying result print('Distance = %f' %(d))


Output


Enter x1: 26
Enter y1: 33
Enter x2: 64
Enter y2: 22
Distance = 65.000000


Result:

The Program has been executed and the output was verified.
 


Write a Program for Tic Tac Toe game played by Single player against automated Computer player



Aim :- Program for Tic Tac Toe game played by Single player against automated Computer player.

Program:

# Tic-Tac-Toe Program using # random number in Python

# importing all necessary libraries import numpy as np
import random
from time import sleep

 
# Creates an empty board def create_board():
return(np.array([[0, 0, 0],
 



[0, 0, 0],
[0, 0, 0]]))
 

# Check for empty places on board def possibilities(board):
l = []

for i in range(len(board)):
for j in range(len(board)):

if board[i][j] == 0:
l.append((i, j))
return(l)

# Select a random place for the player def random_place(board, player):
selection = possibilities(board) current_loc = random.choice(selection) board[current_loc] = player return(board)
 

# Checks whether the player has three # of their marks in a horizontal row def row_win(board, player):
for x in range(len(board)): win = True

for y in range(len(board)):
if board[x, y] != player:
win = False continue

if win == True:
return(win)
return(win)

# Checks whether the player has three # of their marks in a vertical row
def col_win(board, player):
for x in range(len(board)): win = True

for y in range(len(board)):
if board[y][x] != player:
win = False continue

if win == True:
return(win)
return(win)

# Checks whether the player has three # of their marks in a diagonal row
def diag_win(board, player): win = True
y = 0
for x in range(len(board)):
if board[x, x] != player:
win = False
if win:
return win
win = True if win:
for x in range(len(board)):
y = len(board) - 1 - x
if board[x, y] != player:
 
win = False
return win

# Evaluates whether there is # a winner or a tie
def evaluate(board):
winner = 0

for player in [1, 2]:
if (row_win(board, player) or col_win(board,player) or diag_win(board,player)):

winner = player

if np.all(board != 0) and winner == 0: winner = -1
return winner

# Main function to start the game def play_game():
board, winner, counter = create_board(), 0, 1 print(board)
sleep(2)

while winner == 0:
for player in [1, 2]:
board = random_place(board, player) print("Board after " + str(counter) + " move") print(board)
sleep(2) counter += 1
winner = evaluate(board) if winner != 0:
break
return(winner)

# Driver Code
print("Winner is: " + str(play_game()))

Output

[[0 0 0]
[0 0 0]
[0 0 0]]
Board after 1 move
 
[[0 0 1]
[0 0 0]
[0 0 0]]
Board after 2 move [[0 0 1]
[0 0 0]
[0 2 0]]
Board after 3 move [[0 0 1]
[0 0 0]
[1 2 0]]
Board after 4 move [[2 0 1]
[0 0 0]
[1 2 0]]
Board after 5 move [[2 0 1]
[0 0 1]
[1 2 0]]
Board after 6 move [[2 0 1]
[0 0 1]
[1 2 2]]
Board after 7 move [[2 0 1]
[1 0 1]
[1 2 2]]
Board after 8 move [[2 0 1]
[1 2 1]
[1 2 2]]
Winner is: 2

Result:
The Program has been executed and the output was verified.
 


Write a Program for Tic Tac Toe game played by two different human players.


Aim :- Write a Program for Tic Tac Toe game played by two different human players

Program:


import os import time

board = [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
player = 1

########win Flags##########
Win = 1
Draw = -1
Running = 0
Stop = 1 ###########################
Game = Running Mark = 'X'

#This Function Draws Game Board def DrawBoard():
print(" %c | %c | %c " % (board[1],board[2],board[3])) print(" | | _")
print(" %c | %c | %c " % (board[4],board[5],board[6])) print(" | | _")
print(" %c | %c | %c " % (board[7],board[8],board[9])) print(" | | ")

#This Function Checks position is empty or not def CheckPosition(x):
if(board[x] == ' '): return True
else:
 
return False

#This Function Checks player has won or not def CheckWin():
global Game
#Horizontal winning condition
if(board[1] == board[2] and board[2] == board[3] and board[1] != ' '):
Game = Win
elif(board[4] == board[5] and board[5] == board[6] and board[4] != ' '):
Game = Win
elif(board[7] == board[8] and board[8] == board[9] and board[7] != ' '):
Game = Win
#Vertical Winning Condition
elif(board[1] == board[4] and board[4] == board[7] and board[1] != ' '):
Game = Win
elif(board[2] == board[5] and board[5] == board[8] and board[2] != ' '):
Game = Win
elif(board[3] == board[6] and board[6] == board[9] and board[3] != ' '):
Game=Win
#Diagonal Winning Condition
elif(board[1] == board[5] and board[5] == board[9] and board[5] != ' '):
Game = Win
elif(board[3] == board[5] and board[5] == board[7] and board[5] != ' '):
Game=Win
#Match Tie or Draw Condition
elif(board[1]!=' ' and board[2]!=' ' and board[3]!=' ' and board[4]!=' ' and board[5]!=' '
and board[6]!=' ' and board[7]!=' ' and board[8]!=' ' and board[9]!=' '):
Game=Draw else:
Game=Running


print("Player 1 [X] --- Player 2 [O]\n") print()
print()
print("Please Wait...") time.sleep(3)
while(Game == Running): os.system('cls') DrawBoard()
 
if(player % 2 != 0): print("Player 1's chance") Mark = 'X'
else:
print("Player 2's chance") Mark = 'O'
choice = int(input("Enter the position between [1-9] where you want to mark : ")) if(CheckPosition(choice)):
board[choice] = Mark player+=1 CheckWin()

os.system('cls') DrawBoard() if(Game==Draw):
print("Game Draw") elif(Game==Win):
player-=1 if(player%2!=0):
print("Player 1 Won") else:
print("Player 2 Won")


Output:

Player 1 [X] --- Player 2 [O]

Please Wait...
|	|
|	| _
|	|
|	| _
|	|
|	|
Player 1's chance
Enter the position between [1-9] where you want to mark : 1 X | |
| | _
| |
 
| | _
|   |
|   |
Player 2's chance
Enter the position between [1-9] where you want to mark : 2 X | O |
|	| _
|	|
|	| _
|	|
|	|
Player 1's chance
Enter the position between [1-9] where you want to mark : 4 X | O |
|	| _
X |	|
|	| _
|	|
|	|
Player 2's chance
Enter the position between [1-9] where you want to mark : 5 X | O |
|	| _
X | O |
|	| _
|	|
|	|
Player 1's chance
Enter the position between [1-9] where you want to mark : 7 X | O |
|	| _
X | O |
|	| _
X |	|
|	|
Player 1 Won

Result:

The Program has been executed and the output was verified.
 


Write a Program to implement Tower of Hanoi



Aim: Program to Implement Tower of Hanoi.

Program:


def TowerOfHanoi(n , source, destination, auxiliary): if n==1:
print ("Move disk 1 from source",source,"to destination",destination) return
TowerOfHanoi(n-1, source, auxiliary, destination)

print ("Move disk",n,"from source",source,"to destination",destination) TowerOfHanoi(n-1, auxiliary, destination, source)

# Driver code n = 4
TowerOfHanoi(n,'A','B','C')

Output

Move disk 1 from source A to destination C Move disk 2 from source A to destination B Move disk 1 from source C to destination B Move disk 3 from source A to destination C Move disk 1 from source B to destination A Move disk 2 from source B to destination C Move disk 1 from source A to destination C Move disk 4 from source A to destination B
 
Move disk 1 from source C to destination B Move disk 2 from source C to destination A Move disk 1 from source B to destination A Move disk 3 from source C to destination B Move disk 1 from source A to destination C Move disk 2 from source A to destination B Move disk 1 from source C to destination B



Result:

The Program has been executed and the output was verified.
 

Program for building a magic square of Odd number of Rows and columns


Aim: Program for building a magic square of Odd number of Rows and columns



Program:

def generateSquare(n):


# 2-D array with all # slots set to 0
magicSquare = [[0 for x in range(n)]

for y in range(n)]


# initialize position of 1 i = n // 2
j = n - 1


# Fill the magic square # by placing values num = 1
while num <= (n * n):

if i == -1 and j == n: # 3rd condition j = n - 2
i = 0
 
else:



# next number goes out of # right side of square
if j == n:

j = 0


# next number goes # out of upper side if i < 0:
i = n - 1


if magicSquare[int(i)][int(j)]: # 2nd condition j = j - 2
i = i + 1 continue
 
else:
 

magicSquare[int(i)][int(j)] = num num = num + 1
 


j = j + 1

i = i - 1 # 1st condition


# Printing magic square print("Magic Square for n =", n)
 
print("Sum of each row or column", n * (n * n + 1) // 2, "\n")

for i in range(0, n):

for j in range(0, n):

print('%2d ' % (magicSquare[i][j]), end='')

# To display output # in matrix form
if j == n - 1:

print()


# Driver Code




# Works only when n is odd n = 7
generateSquare(n)


Output


Magic Square for n = 7

Sum of each row or column 175 20 12 4 45 37 29 28
 
11 3 44 36 35 27 19

2 43 42 34 26 18 10

49 41 33 25 17 9 1

40 32 24 16 8 7 48

31 23 15 14 6 47 39

22 21 13 5 46 38 30


Result:
The Program has been executed and the output was verified.
 

Write a Program for building a magic square of Even number of Rows and columns.



Aim: Program for building a magic square of Even number of Rows and columns.



Program:


def DoublyEven(n):


# 2-D matrix with all entries as 0

arr = [[(n*y)+x+1 for x in range(n)]for y in range(n)]


# Change value of array elements at fix location # as per the rule (n*n+1)-arr[i][[j]
print("Magic Square for n =", n) print("Sum of each row or column") # Corners of order (n/4)*(n/4)
# Top left corner

for i in range(0,n//4):

for j in range(0,n//4):

arr[i][j] = (n*n + 1) - arr[i][j];


# Top right corner for i in range(0,n//4):
 
for j in range(3 * (n//4),n):

arr[i][j] = (n*n + 1) - arr[i][j];


# Bottom Left corner

for i in range(3 * (n//4),n): for j in range(0,n//4):
arr[i][j] = (n*n + 1) - arr[i][j];


# Bottom Right corner

for i in range(3 * (n//4),n):

for j in range(3 * (n//4),n):

arr[i][j] = (n*n + 1) - arr[i][j];


# Centre of matrix,order (n/2)*(n/2) for i in range(n//4,3 * (n//4)):
for j in range(n//4,3 * (n//4)):

arr[i][j] = (n*n + 1) - arr[i][j];


# Printing the square for i in range(n):
for j in range(n):

print ('%2d ' %(arr[i][j]),end=" ")

print()


# Driver Program
 
n = 7 DoublyEven(n)

Output:

Magic Square for n = 7 Sum of each row or column 49 2 3 46 45 44 43
8 41 40 11 12 13 14

15	34	33	18	19	20	21
28	23	24	25	24	23	22
21	30	31	18	17	16	15
14	37	38	11	10	9	8

7 44 45 4 3   2 1


Result:

The Program has been executed and the output was verified.
 




Write a Program to implement five House Logic Puzzle Problem


Aim: Program to implement five House Logic Puzzle Problem.

Program:

# Houses # 1 2 3 4 5

from constraint import *
problem = Problem()

nationality = ["English", "Spanish", "Ukrainian", "Norwegian", "Japanese"] pet = ["dog", "snails", "fox", "horse", "zebra"]
cigarette = ["Old Gold", "Kools", "Chesterfields", "Lucky Strike", "Parliaments"]
colour = ["red", "green", "yellow", "blue", "ivory"] beverage = ["coffee", "milk", "orange juice", "water", "tea"]

criteria = nationality + pet + cigarette + colour + beverage problem.addVariables(criteria,[1,2,3,4,5])

problem.addConstraint(AllDifferentConstraint(), nationality) problem.addConstraint(AllDifferentConstraint(), pet) problem.addConstraint(AllDifferentConstraint(), cigarette) problem.addConstraint(AllDifferentConstraint(), colour) problem.addConstraint(AllDifferentConstraint(), beverage)

problem.addConstraint(lambda e, r: e == r, ["English","red"]) problem.addConstraint(lambda s, d: s == d, ("Spanish","dog")) problem.addConstraint(lambda c, g: c == g, ("coffee","green")) problem.addConstraint(lambda u, t: u == t, ("Ukrainian","tea")) problem.addConstraint(lambda g, i: g-i == 1, ("green","ivory")) problem.addConstraint(lambda o, s: o == s, ("Old Gold","snails")) problem.addConstraint(lambda k, y: k == y, ("Kools","yellow"))
 
problem.addConstraint(InSetConstraint([3]), ["milk"]) problem.addConstraint(InSetConstraint([1]), ["Norwegian"]) problem.addConstraint(lambda c, f: abs(c-f) == 1, ("Chesterfields","fox")) problem.addConstraint(lambda k, h: abs(k-h) == 1, ("Kools","horse")) problem.addConstraint(lambda l, o: l == o, ["Lucky Strike","orange juice"]) problem.addConstraint(lambda j, p: j == p, ["Japanese","Parliaments"]) problem.addConstraint(lambda k, h: abs(k-h) == 1, ("Norwegian","blue"))

solution = problem.getSolutions()[0]

for i in range(1,6):
for x in solution:
if solution[x] == i:
print str(i), x

Output:

1 yellow

1 water

1 Kools

1 fox

1	Norwegian

2	tea

2 blue

2 horse

2 Ukrainian

2	Chesterfields

3	Old Gold

3 English

3 milk

3 snails

3	red
 
4	ivory

4 dog

4 Lucky Strike

4 orange juice

4	Spanish

5	Parliaments

5 coffee

5 zebra

5 Japanese

5 green


Result:
The Program has been executed and the output was verified.
 

Write a Program for solving A* shortest path algorithm


Aim: Program for solving A* shortest path algorithm.


Program:


# Python program for Dijkstra's single

# source shortest path algorithm. The program is # for adjacency matrix representation of the graph # Library for INT_MAX
import sys


class Graph():


def  init (self, vertices): self.V = vertices
self.graph = [[0 for column in range(vertices)]

for row in range(vertices)]


def printSolution(self, dist): print("Vertex \tDistance from Source") for node in range(self.V):
print(node, "\t", dist[node])
 

# A utility function to find the vertex with

# minimum distance value, from the set of vertices # not yet included in shortest path tree
def minDistance(self, dist, sptSet):


# Initialize minimum distance for next node min = sys.maxsize

# Search not nearest vertex not in the # shortest path tree
for u in range(self.V):

if dist[u] < min and sptSet[u] == False: min = dist[u]
min_index = u

return min_index


# Function that implements Dijkstra's single source # shortest path algorithm for a graph represented
# using adjacency matrix representation

def dijkstra(self, src):


dist = [sys.maxsize] * self.V dist[src] = 0
sptSet = [False] * self.V
 

for cout in range(self.V):

# Pick the minimum distance vertex from # the set of vertices not yet processed.
# x is always equal to src in first iteration x = self.minDistance(dist, sptSet)

# Put the minimum distance vertex in the # shortest path tree
sptSet[x] = True


# Update dist value of the adjacent vertices # of the picked vertex only if the current
# distance is greater than new distance and # the vertex in not in the shortest path tree for y in range(self.V):
if self.graph[x][y] > 0 and sptSet[y] == False and \ dist[y] > dist[x] + self.graph[x][y]:
dist[y] = dist[x] + self.graph[x][y] self.printSolution(dist)
# Driver program g = Graph(9)
g.graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0],

[4, 0, 8, 0, 0, 0, 0, 11, 0],

[0, 8, 0, 7, 0, 4, 0, 0, 2],
 
[0, 0, 7, 0, 9, 14, 0, 0, 0],

[0, 0, 0, 9, 0, 10, 0, 0, 0],

[0, 0, 4, 14, 10, 0, 2, 0, 0],

[0, 0, 0, 0, 0, 2, 0, 1, 6],

[8, 11, 0, 0, 0, 0, 1, 0, 7],

[0, 0, 2, 0, 0, 0, 6, 7, 0]

];


g.dijkstra(0);


OUTPUT:



Vertex	Distance from Source
0	0
1	4
2	12
3	19
4	21
5	11
6	9
7	8
8


Result:	14

The Program has been executed and the output was verified.
 

Write a Program which demonstrates Best First Search.


Aim: Program which demonstrates Best First Search.



Program:


# Python implementation to build a # graph using Dictionaries
from collections import defaultdict # Function to build the graph
def build_graph():
edges = [
["A", "B"], ["A", "E"],
["A", "C"], ["B", "D"],
["B", "E"], ["C", "F"],
["C", "G"], ["D", "E"]
]
graph = defaultdict(list)

# Loop to iterate over every # edge of the graph
for edge in edges:
a, b = edge[0], edge[1]

# Creating the graph # as adjacency list graph[a].append(b) graph[b].append(a)
return graph

if    name	== " main ": graph = build_graph()

print(graph)
 

Output:


defaultdict(<class 'list'>,

{'A': ['B', 'E', 'C'],

'B': ['A', 'D', 'E'],

'E': ['A', 'B', 'D'],

'C': ['A', 'F', 'G'],

'D': ['B', 'E'],

'F': ['C'],

'G': ['C']

})




Result:

The Program has been executed and the output was verified.
 


Write a Program to solve 8- Queens problem


Aim: Program to solve 8- Queens problem


Program:


# Taking number of queens as input from user print ("Enter the number of queens")
N = int(input())
# here we create a chessboard
# NxN matrix with all elements set to 0 board = [[0]*N for _ in range(N)]
def attack(i, j):
#checking vertically and horizontally for k in range(0,N):
if board[i][k]==1 or board[k][j]==1: return True
#checking diagonally for k in range(0,N):
for l in range(0,N):
if (k+l==i+j) or (k-l==i-j): if board[k][l]==1:
return True return False
def N_queens(n): if n==0:
return True
for i in range(0,N):
 
for j in range(0,N):
if (not(attack(i,j))) and (board[i][j]!=1): board[i][j] = 1
if N_queens(n-1)==True: return True
board[i][j] = 0 return False
N_queens(N) for i in board: print (i)

Output:


Enter the number of queens 8
[1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]



Result:

The Program has been executed and the output was verified.
 


Write Program which demonstrate the precedence properties of operators in C language.


Aim : Program which demonstrate the precedence properties of operators in C language

Program:



#include <stdio.h> int main()
{

int a = 10, b = 20, c = 30; if (c > b > a)
printf("TRUE");

else

printf("FALSE");

return 0;

}


Output:


FALSE



Result:
The Program has been executed and the output was verified.
 


Write a Program to Make a Simple Calculator



Aim : Write a Program to Make a Simple Calculator.


Program:

# Program make a simple calculator

# This function adds two numbers def add(x, y):
return x + y

# This function subtracts two numbers def subtract(x, y):
return x - y

# This function multiplies two numbers def multiply(x, y):
return x * y

# This function divides two numbers def divide(x, y):
return x / y

print("Select operation.") print("1.Add") print("2.Subtract") print("3.Multiply") print("4.Divide")

while True:
# take input from the user
choice = input("Enter choice(1/2/3/4): ")

# check if choice is one of the four options if choice in ('1', '2', '3', '4'):
num1 = float(input("Enter first number: "))
 
num2 = float(input("Enter second number: "))

if choice == '1':
print(num1, "+", num2, "=", add(num1, num2))

elif choice == '2':
print(num1, "-", num2, "=", subtract(num1, num2))

elif choice == '3':
print(num1, "*", num2, "=", multiply(num1, num2))

elif choice == '4':
print(num1, "/", num2, "=", divide(num1, num2))

# check if user wants another calculation # break the while loop if answer is no
next_calculation = input("Let's do next calculation? (yes/no): ") if next_calculation == "no":
break

else:
print("Invalid Input")


Output:

Select operation. 1.Add 2.Subtract 3.Multiply 4.Divide
Enter choice(1/2/3/4): 1 Enter first number: 5 Enter second number: 5 5.0 + 5.0 = 10.0
Let's do next calculation? (yes/no): yes Enter choice(1/2/3/4): 2
Enter first number: 4 Enter second number: 2 4.0 - 2.0 = 2.0
Let's do next calculation? (yes/no): yes Enter choice(1/2/3/4): 3
Enter first number: 6 Enter second number: 4 6.0 * 4.0 = 24.0
Let's do next calculation? (yes/no): yes
 
Enter choice(1/2/3/4): 4 Enter first number: 30 Enter second number: 5 30.0 / 5.0 = 6.0
Let's do next calculation? (yes/no): yes Enter choice(1/2/3/4): 5
Invalid Input
Enter choice(1/2/3/4): 1 Enter first number: 1 Enter second number: 1 1.0 + 1.0 = 2.0
Let's do next calculation? (yes/no): no

Result:

The Program has been executed and the output was verified.
